// Generated by gencpp from file raspimouse_ros_2/LedValues.msg
// DO NOT EDIT!


#ifndef RASPIMOUSE_ROS_2_MESSAGE_LEDVALUES_H
#define RASPIMOUSE_ROS_2_MESSAGE_LEDVALUES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace raspimouse_ros_2
{
template <class ContainerAllocator>
struct LedValues_
{
  typedef LedValues_<ContainerAllocator> Type;

  LedValues_()
    : left_side(false)
    , left_forward(false)
    , right_forward(false)
    , right_side(false)  {
    }
  LedValues_(const ContainerAllocator& _alloc)
    : left_side(false)
    , left_forward(false)
    , right_forward(false)
    , right_side(false)  {
  (void)_alloc;
    }



   typedef uint8_t _left_side_type;
  _left_side_type left_side;

   typedef uint8_t _left_forward_type;
  _left_forward_type left_forward;

   typedef uint8_t _right_forward_type;
  _right_forward_type right_forward;

   typedef uint8_t _right_side_type;
  _right_side_type right_side;





  typedef boost::shared_ptr< ::raspimouse_ros_2::LedValues_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raspimouse_ros_2::LedValues_<ContainerAllocator> const> ConstPtr;

}; // struct LedValues_

typedef ::raspimouse_ros_2::LedValues_<std::allocator<void> > LedValues;

typedef boost::shared_ptr< ::raspimouse_ros_2::LedValues > LedValuesPtr;
typedef boost::shared_ptr< ::raspimouse_ros_2::LedValues const> LedValuesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::raspimouse_ros_2::LedValues_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::raspimouse_ros_2::LedValues_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::raspimouse_ros_2::LedValues_<ContainerAllocator1> & lhs, const ::raspimouse_ros_2::LedValues_<ContainerAllocator2> & rhs)
{
  return lhs.left_side == rhs.left_side &&
    lhs.left_forward == rhs.left_forward &&
    lhs.right_forward == rhs.right_forward &&
    lhs.right_side == rhs.right_side;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::raspimouse_ros_2::LedValues_<ContainerAllocator1> & lhs, const ::raspimouse_ros_2::LedValues_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace raspimouse_ros_2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::raspimouse_ros_2::LedValues_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raspimouse_ros_2::LedValues_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raspimouse_ros_2::LedValues_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raspimouse_ros_2::LedValues_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raspimouse_ros_2::LedValues_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raspimouse_ros_2::LedValues_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::raspimouse_ros_2::LedValues_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2adb2361511085e78133ae99bfd5484a";
  }

  static const char* value(const ::raspimouse_ros_2::LedValues_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2adb2361511085e7ULL;
  static const uint64_t static_value2 = 0x8133ae99bfd5484aULL;
};

template<class ContainerAllocator>
struct DataType< ::raspimouse_ros_2::LedValues_<ContainerAllocator> >
{
  static const char* value()
  {
    return "raspimouse_ros_2/LedValues";
  }

  static const char* value(const ::raspimouse_ros_2::LedValues_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::raspimouse_ros_2::LedValues_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool left_side\n"
"bool left_forward\n"
"bool right_forward\n"
"bool right_side\n"
;
  }

  static const char* value(const ::raspimouse_ros_2::LedValues_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::raspimouse_ros_2::LedValues_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_side);
      stream.next(m.left_forward);
      stream.next(m.right_forward);
      stream.next(m.right_side);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LedValues_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raspimouse_ros_2::LedValues_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::raspimouse_ros_2::LedValues_<ContainerAllocator>& v)
  {
    s << indent << "left_side: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_side);
    s << indent << "left_forward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_forward);
    s << indent << "right_forward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_forward);
    s << indent << "right_side: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_side);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RASPIMOUSE_ROS_2_MESSAGE_LEDVALUES_H
