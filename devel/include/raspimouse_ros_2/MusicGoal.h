// Generated by gencpp from file raspimouse_ros_2/MusicGoal.msg
// DO NOT EDIT!


#ifndef RASPIMOUSE_ROS_2_MESSAGE_MUSICGOAL_H
#define RASPIMOUSE_ROS_2_MESSAGE_MUSICGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace raspimouse_ros_2
{
template <class ContainerAllocator>
struct MusicGoal_
{
  typedef MusicGoal_<ContainerAllocator> Type;

  MusicGoal_()
    : freqs()
    , durations()  {
    }
  MusicGoal_(const ContainerAllocator& _alloc)
    : freqs(_alloc)
    , durations(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint16_t>> _freqs_type;
  _freqs_type freqs;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _durations_type;
  _durations_type durations;





  typedef boost::shared_ptr< ::raspimouse_ros_2::MusicGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::raspimouse_ros_2::MusicGoal_<ContainerAllocator> const> ConstPtr;

}; // struct MusicGoal_

typedef ::raspimouse_ros_2::MusicGoal_<std::allocator<void> > MusicGoal;

typedef boost::shared_ptr< ::raspimouse_ros_2::MusicGoal > MusicGoalPtr;
typedef boost::shared_ptr< ::raspimouse_ros_2::MusicGoal const> MusicGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::raspimouse_ros_2::MusicGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::raspimouse_ros_2::MusicGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::raspimouse_ros_2::MusicGoal_<ContainerAllocator1> & lhs, const ::raspimouse_ros_2::MusicGoal_<ContainerAllocator2> & rhs)
{
  return lhs.freqs == rhs.freqs &&
    lhs.durations == rhs.durations;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::raspimouse_ros_2::MusicGoal_<ContainerAllocator1> & lhs, const ::raspimouse_ros_2::MusicGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace raspimouse_ros_2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::raspimouse_ros_2::MusicGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::raspimouse_ros_2::MusicGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raspimouse_ros_2::MusicGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::raspimouse_ros_2::MusicGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raspimouse_ros_2::MusicGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::raspimouse_ros_2::MusicGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::raspimouse_ros_2::MusicGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ef496869439cc17a38964ad650d3bc3e";
  }

  static const char* value(const ::raspimouse_ros_2::MusicGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xef496869439cc17aULL;
  static const uint64_t static_value2 = 0x38964ad650d3bc3eULL;
};

template<class ContainerAllocator>
struct DataType< ::raspimouse_ros_2::MusicGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "raspimouse_ros_2/MusicGoal";
  }

  static const char* value(const ::raspimouse_ros_2::MusicGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::raspimouse_ros_2::MusicGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"uint16[] freqs\n"
"float32[] durations\n"
;
  }

  static const char* value(const ::raspimouse_ros_2::MusicGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::raspimouse_ros_2::MusicGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.freqs);
      stream.next(m.durations);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MusicGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::raspimouse_ros_2::MusicGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::raspimouse_ros_2::MusicGoal_<ContainerAllocator>& v)
  {
    s << indent << "freqs[]" << std::endl;
    for (size_t i = 0; i < v.freqs.size(); ++i)
    {
      s << indent << "  freqs[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.freqs[i]);
    }
    s << indent << "durations[]" << std::endl;
    for (size_t i = 0; i < v.durations.size(); ++i)
    {
      s << indent << "  durations[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.durations[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RASPIMOUSE_ROS_2_MESSAGE_MUSICGOAL_H
